#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################

AP_MODE_CONFIG_FILE="/home/pi/dev/pt-wireless-access-point-deb/default_config"

usage_and_exit() {
	echo -e "Usage:\\n\\t${0} <start|stop> <SSID> <PASSPHRASE>"
	echo "where:"
	echo -e "\\t<start|stop>: start or stop AP mode"
	echo -e "\\t<SSID>: name of the access point wireless network. If not provided, uses the SSID from ${AP_MODE_CONFIG_FILE}"
	echo -e "\\t<PASSPHRASE>: network password. If not provided, uses the passphrase from ${AP_MODE_CONFIG_FILE}"
	exit 1
}

restart_and_wait_for_service_state() {
	service_name="${1}"
	service_state="${2:-running}"
	echo "Restarting service ${service_name}..."
	systemctl restart "${service_name}"
	while [ "$(systemctl show -p ActiveState --value "${service_name}")" != "active" ] || [ "$(systemctl show -p SubState --value "${service_name}")" != "${service_state}" ]; do
		echo "Service ${service_name} isn't ready - sleeping for 2 seconds..."
		sleep 2
	done
}

clean_config_files() {
	hostapd_conf="/etc/hostapd/hostapd.conf"
	if [[ -f "${hostapd_conf}.orig" ]]; then
		echo "Restoring previous hostapd configuration from ${hostapd_conf}.orig"
		mv "${hostapd_conf}.orig" "${hostapd_conf}"
	fi

	echo "Restoring /etc/dhcpcd.conf"
	# TODO: be more elegant in removing the static ip setting
	sed -i -z 's|interface '"${wifi_interface}"'\nstatic ip_address='"${interface_ip}"'/24||p' /etc/dhcpcd.conf

	echo "Restoring /etc/default/isc-dhcp-server"
	# TODO: be more elegant in removing this from the space-separated list variable
	sed -i 's|INTERFACESv4="ptusb0 '"${wifi_interface}"'"|INTERFACESv4="ptusb0"|' /etc/default/isc-dhcp-server
}

patch_config_files() {
	hostapd_conf="/etc/hostapd/hostapd.conf"
	if [[ -f "${hostapd_conf}" ]]; then
		echo "Backing up existing ${hostapd_conf}..."
		cp "${hostapd_conf}" "${hostapd_conf}.orig"
	fi

	echo "Configuring hostapd ..."
	echo "interface=${wifi_interface}
hw_mode=g
channel=6
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_pairwise=TKIP
rsn_pairwise=CCMP
ssid=${ssid}
wpa_passphrase=${wpa_passphrase}" >/etc/hostapd/hostapd.conf

	if ! grep -q "interface ${wifi_interface}
static ip_address=${interface_ip}/24" /etc/dhcpcd.conf; then
		echo "Setting static IP configuration in /etc/dhcpcd.conf ..."
		# TODO: Wrap with tags, same as other dhcpd file edits
		# e.g. "[pi-topOS START]"
		echo -e "interface ${wifi_interface}\\nstatic ip_address=${interface_ip}/24" >>/etc/dhcpcd.conf
	fi

	if ! grep -q "subnet ${subnet_ip} netmask ${subnet_mask} {" /etc/dhcp/dhcpd.conf; then
		echo "Setting subnet configuration in /etc/dhcp/dhcpd.conf ..."
		# TODO: Wrap with tags, same as other dhcpd file edits
		# e.g. "[pi-topOS START]"
		echo "subnet ${subnet_ip} netmask ${subnet_mask} {
    range ${static_ip_prefix}.${dhcp_start} ${static_ip_prefix}.${dhcp_end};
    option subnet-mask ${subnet_mask};
    option routers ${interface_ip};
    option domain-name-servers 8.8.8.8, 8.8.4.4;
    option time-offset 0;
    option broadcast-address ${static_ip_prefix}.255;
  }" >>/etc/dhcp/dhcpd.conf
	fi

	# TODO: be more elegant in adding this to the space-separated list variable
	echo "Configuring ${wifi_interface} in /etc/default/isc-dhcp-server..."
	sed -i 's,INTERFACESv4="ptusb0",INTERFACESv4="ptusb0 '"${wifi_interface}"'",' /etc/default/isc-dhcp-server
}

start_ap_mode() {
	echo "Starting Wifi: Access Point Mode ..."
	restart_and_wait_for_service_state pt-dhcp-server exited
	restart_and_wait_for_service_state hostapd running
	echo "Started AP mode with SSID ${ssid}"
}

stop_ap_mode_if_active() {
	if systemctl status hostapd &>/dev/null; then
		echo "Stopping Wifi: Access Point Mode ..."
		systemctl stop hostapd
		echo "Stopped AP mode"
	fi
}

start_wifi_managed_mode() {
	echo "Starting Wifi: Managed Mode ..."
	restart_and_wait_for_service_state dhcpcd running
	restart_and_wait_for_service_state pt-dhcp-server exited
	restart_and_wait_for_service_state wpa_supplicant running
}

stop_wifi_managed_mode() {
	echo "Stopping Wifi: Managed Mode ..."
	if wpa_cli -i "${wifi_interface}" status &>/dev/null; then
		wpa_cli -i "${wifi_interface}" terminate && true
	fi
	systemctl stop wpa_supplicant
}

if [[ "$EUID" -ne 0 ]]; then
	echo "Please run as root"
	exit 1
fi

if [[ "${1}" != "start" ]] && [[ "${1}" != "stop" ]]; then
	echo "Argument does not match 'start' or 'stop'."
	echo ""
	usage_and_exit
fi

# shellcheck disable=SC1090
source "${AP_MODE_CONFIG_FILE}"

wifi_interface="${wifi_interface:-wlan0}"
static_ip_prefix="${static_ip_prefix:-10.8.8}"
interface_ip="${interface_ip:-${static_ip_prefix}.1}"
subnet_ip="${subnet_ip:-${static_ip_prefix}.0}"
subnet_mask="${subnet_mask:-255.255.255.0}"
dhcp_start="${dhcp_start:-${static_ip_prefix}.10}"
dhcp_end="${dhcp_end:-${static_ip_prefix}.50}"

ssid="${ssid:-${2}}"
wpa_passphrase="${wpa_passphrase:-${3}}"

if [[ -z "${ssid}" ]]; then
	echo "No SSID provided."
	echo ""
	usage_and_exit
fi

if [[ -z "${wpa_passphrase}" ]]; then
	echo "No passphrase provided."
	echo ""
	usage_and_exit
fi

if [[ "${1}" == "start" ]]; then
	stop_ap_mode_if_active
	patch_config_files
	stop_wifi_managed_mode
	start_ap_mode
elif [[ "${1}" == "stop" ]]; then
	stop_ap_mode_if_active
	clean_config_files
	start_wifi_managed_mode
fi
